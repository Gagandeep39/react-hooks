{"version":3,"sources":["components/UI/Card.js","components/UI/LoadingIndicator.js","components/Ingredients/IngredientForm.js","components/Ingredients/Search.js","components/Ingredients/IngredientList.js","components/UI/ErrorModal.js","components/Ingredients/Ingredients.js","context/auth-context.js","components/Auth.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","children","LoadingIndicator","IngredientForm","React","memo","useState","titleState","setTitleState","amountState","setAmountState","onSubmit","event","preventDefault","onAddIngredient","title","amount","htmlFor","type","id","value","onChange","target","loading","Search","searchRef","useRef","filterState","setFilterState","onLoadIngredients","useEffect","timer","setTimeout","current","console","log","query","length","fetch","then","response","json","responseData","loadedIngredients","key","push","clearTimeout","ref","IngredientList","ingredients","map","ig","onClick","onRemoveItem","bind","ErrorModal","Fragment","onClose","ingredientReducer","currentIngredients","action","ingredient","filter","ing","Error","httpReducer","currHttpState","error","errorData","Ingredients","useReducer","ingredientsState","dispatch","httpState","dispatchHttp","filterIngredientHandler","useCallback","filteredIngredients","newIngredients","method","body","JSON","stringify","headers","name","catch","message","isLoading","ingredientId","AuthContext","createContext","isAuth","login","AuthContextProvider","isAuthenticated","setIsAuthenticated","Provider","Auth","authContext","useContext","App","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAQeA,G,MAJF,SAAAC,GACX,OAAO,yBAAKC,UAAU,QAAQD,EAAME,YCQvBC,G,YATU,kBACvB,yBAAKF,UAAU,YACb,8BACA,8BACA,8BACA,iCC4CWG,EA/CQC,IAAMC,MAAK,SAACN,GAAU,MAGPO,mBAAS,IAHF,mBAGpCC,EAHoC,KAGxBC,EAHwB,OAILF,mBAAS,IAJJ,mBAIpCG,EAJoC,KAIvBC,EAJuB,KAW3C,OACE,6BAASV,UAAU,mBACjB,kBAAC,EAAD,KACE,0BAAMW,SARU,SAACC,GACrBA,EAAMC,iBACNd,EAAMe,gBAAgB,CAAEC,MAAOR,EAAYS,OAAQP,MAO7C,yBAAKT,UAAU,gBACb,2BAAOiB,QAAQ,SAAf,QACA,2BACEC,KAAK,OACLC,GAAG,QACHC,MAAOb,EAAWQ,MAClBM,SAAU,SAACT,GACTJ,EAAcI,EAAMU,OAAOF,WAIjC,yBAAKpB,UAAU,gBACb,2BAAOiB,QAAQ,UAAf,UACA,2BACEC,KAAK,SACLC,GAAG,SACHC,MAAOX,EAAYO,OACnBK,SAAU,SAACT,GACTF,EAAeE,EAAMU,OAAOF,WAIlC,yBAAKpB,UAAU,4BACb,4BAAQkB,KAAK,UAAb,kBACEnB,EAAMwB,QAAU,kBAAC,EAAD,MAAuB,YCetCC,G,MAvDApB,IAAMC,MAAK,SAACN,GACzB,IAAM0B,EAAYC,mBADiB,EAEGpB,mBAAS,IAFZ,mBAE5BqB,EAF4B,KAEfC,EAFe,KAM3BC,EAAsB9B,EAAtB8B,kBAgCR,OA7BAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvB,GAAGL,IAAgBF,EAAUQ,QAAQb,MAAO,CAC1Cc,QAAQC,IAAI,YAChB,IAAMC,EACmB,IAAvBT,EAAYU,OACR,GADJ,oCAEiCV,EAFjC,KAGFW,MACE,iEAAmEF,GAElEG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMC,EAAoB,GAC1B,IAAK,IAAMC,KAAOF,EAChBC,EAAkBE,KAAK,CACrB1B,GAAIyB,EACJ7B,MAAO2B,EAAaE,GAAK7B,MACzBC,OAAQ0B,EAAaE,GAAK5B,SAG9Ba,EAAkBc,SAGnB,KACH,OAAO,WACLG,aAAaf,MAEd,CAACJ,EAAaE,EAAmBJ,IAElC,6BAASzB,UAAU,UACjB,kBAAC,EAAD,KACE,yBAAKA,UAAU,gBACb,kDACA,2BACE+C,IAAKtB,EACLP,KAAK,OACLE,MAAOO,EACPN,SAAU,SAACT,GAAD,OAAWgB,EAAehB,EAAMU,OAAOF,iBChC9C4B,G,MAhBQ,SAAAjD,GACrB,OACE,6BAASC,UAAU,mBACjB,kDACA,4BACGD,EAAMkD,YAAYC,KAAI,SAAAC,GAAE,OACvB,wBAAIP,IAAKO,EAAGhC,GAAIiC,QAASrD,EAAMsD,aAAaC,U,EAAWH,EAAGhC,KACxD,8BAAOgC,EAAGpC,OACV,8BAAOoC,EAAGnC,OAAV,aCSGuC,G,MAjBInD,IAAMC,MAAK,SAAAN,GAC5B,OACE,kBAAC,IAAMyD,SAAP,KACE,yBAAKxD,UAAU,WAAWoD,QAASrD,EAAM0D,UACzC,yBAAKzD,UAAU,eACb,kDACA,2BAAID,EAAME,UACV,yBAAKD,UAAU,wBACb,4BAAQkB,KAAK,SAASkC,QAASrD,EAAM0D,SAArC,eCLJC,EAAoB,SAACC,EAAoBC,GAC7C,OAAQA,EAAO1C,MACb,IAAK,MACH,OAAO0C,EAAOX,YAChB,IAAK,MACH,MAAM,GAAN,mBAAWU,GAAX,CAA+BC,EAAOC,aACxC,IAAK,SACH,OAAOF,EAAmBG,QAAO,SAAAC,GAAG,OAAIA,EAAI5C,KAAOyC,EAAOzC,MAE5D,QACE,MAAM,IAAI6C,MAAM,iBAIhBC,EAAc,SAACC,EAAeN,GAClC,OAAQA,EAAO1C,MACb,IAAK,OACH,MAAO,CAAEK,SAAS,EAAM4C,MAAO,MACjC,IAAK,WACH,OAAO,2BAAID,GAAX,IAA0B3C,SAAS,IACrC,IAAK,QACH,MAAO,CAAEA,SAAS,EAAO4C,MAAOP,EAAOQ,WACzC,IAAK,QACH,OAAO,2BAAIF,GAAX,IAA0BC,MAAO,OACnC,QACE,MAAM,IAAIH,MAAM,yBAoGPK,MAhGf,WAAwB,IAAD,EACgBC,qBAAWZ,EAAmB,IAD9C,mBACda,EADc,KACIC,EADJ,OAEaF,qBAAWL,EAAa,CAAE1C,SAAS,EAAO4C,MAAO,OAF9D,mBAEdM,EAFc,KAEHC,EAFG,KAQfC,EAA0BC,uBAAY,SAACC,GAE3CL,EAAS,CACPtD,KAAM,MACN+B,YAAa4B,MAEd,IAiEH,OACE,yBAAK7E,UAAU,OACXyE,EAAUN,MAAQ,kBAAC,EAAD,CAAYV,QARV,WAGxBiB,EAAa,CAACxD,KAAM,YAKE,IAA0CuD,EAAUN,MAApD,KAA2E,KAC/F,kBAAC,EAAD,CAAgBrD,gBA7DS,SAACgE,GAC5BJ,EAAa,CAACxD,KAAM,SAEpBoB,MAAM,iEAAkE,CACtEyC,OAAQ,OACRC,KAAMC,KAAKC,UAAUJ,GACrBK,QAAS,CAAE,eAAgB,sBAE1B5C,MAGC,SAACC,GAGC,OAFAkC,EAAa,CAACxD,KAAM,aAEbsB,EAASC,UAGnBF,MAAK,SAACG,GAOL8B,EAAS,CACPtD,KAAM,MACN2C,WAAW,aAAG1C,GAAIuB,EAAa0C,MAASN,QAEzCO,OAAM,SAAAlB,GAAK,OAAIO,EAAa,CAACxD,KAAM,QAASiD,MAAOA,EAAMmB,cAiCL/D,QAASkD,EAAUc,YAE1E,iCACE,kBAAC,EAAD,CAAQ1D,kBAAmB8C,IAE3B,kBAAC,EAAD,CACE1B,YAAasB,EACblB,aArCwB,SAAAmC,GAE9Bd,EAAa,CAACxD,KAAM,SACpBoB,MAAM,6DAAD,OAA8DkD,EAA9D,SAAmF,CACtFT,OAAQ,WACPxC,MAAK,SAAAC,GAERkC,EAAa,CAACxD,KAAM,aAClBgB,QAAQC,IAAI,YACZD,QAAQC,IAAIoC,GAIZC,EAAS,CACPtD,KAAM,SACNC,GAAIqE,IAENtD,QAAQC,IAAIoC,MACXc,OAAM,SAAAlB,GAAK,OAAIO,EAAa,CAACxD,KAAK,QAASiD,MAAOA,EAAMmB,mBCxGlDG,G,MAAcrF,IAAMsF,cAAc,CAC7CC,QAAQ,EACRC,MAAO,gBAgBMC,EAba,SAAC9F,GAAW,IAAD,EAESO,oBAAS,GAFlB,mBAE9BwF,EAF8B,KAEbC,EAFa,KAMrC,OACE,kBAACN,EAAYO,SAAb,CAAsB5E,MAAO,CAACwE,MAJX,WACnBG,GAAmB,IAGgCJ,OAAQG,IACxD/F,EAAME,WCSEgG,EAlBF,SAAAlG,GACX,IAAMmG,EAAcC,qBAAWV,GAM/B,OACE,yBAAKzF,UAAU,QACb,kBAAC,EAAD,KACE,0DACA,yDACA,4BAAQoD,QATO,WACnB8C,EAAYN,UAQR,aCHOQ,EATH,SAAArG,GACV,IAAMmG,EAAcC,qBAAWV,GAC3BY,EAAU,kBAAC,EAAD,MAId,OAHGH,EAAYP,SACbU,EAAU,kBAAC,EAAD,OAELA,GCAWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEd/B,OAAM,SAAAlB,GACLjC,QAAQiC,MAAMA,EAAMmB,c","file":"static/js/main.8b7689c5.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React from 'react';\n\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => (\n  <div className=\"lds-ring\">\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingIndicator;\n","import React, { useState } from 'react';\n\nimport Card from '../UI/Card';\nimport './IngredientForm.css';\nimport LoadingIndicator from '../UI/LoadingIndicator';\n\nconst IngredientForm = React.memo((props) => {\n  // const [titleState, setTitleState] = useState({ title: '' });\n  // const [amountState, setAmountState] = useState({ amount: '' });\n  const [titleState, setTitleState] = useState('');\n  const [amountState, setAmountState] = useState('');\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onAddIngredient({ title: titleState, amount: amountState });\n  };\n\n  return (\n    <section className='ingredient-form'>\n      <Card>\n        <form onSubmit={submitHandler}>\n          <div className='form-control'>\n            <label htmlFor='title'>Name</label>\n            <input\n              type='text'\n              id='title'\n              value={titleState.title}\n              onChange={(event) => {\n                setTitleState(event.target.value);\n              }}\n            />\n          </div>\n          <div className='form-control'>\n            <label htmlFor='amount'>Amount</label>\n            <input\n              type='number'\n              id='amount'\n              value={amountState.amount}\n              onChange={(event) => {\n                setAmountState(event.target.value);\n              }}\n            />\n          </div>\n          <div className='ingredient-form__actions'>\n            <button type='submit'>Add Ingredient</button>\n            { props.loading ? <LoadingIndicator /> : null }\n          </div>\n        </form>\n      </Card>\n    </section>\n  );\n});\n\nexport default IngredientForm;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport Card from '../UI/Card';\nimport './Search.css';\n\nconst Search = React.memo((props) => {\n  const searchRef = useRef();\n  const [filterState, setFilterState] = useState('');\n  // Props destructuring\n  // Fetchin g props data and storing it in a variable\n  // This allows useEffect to run only when taht specific thing changes\n  const { onLoadIngredients } = props;\n\n  // Now the function will check if the inout has changed in a 0.5 sec interval and then run nstead of sending request in every keystroke\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if(filterState === searchRef.current.value) {\n        console.log('Executed');\n    const query =\n      filterState.length === 0\n        ? ''\n        : `?orderBy=\"title\"&equalTo=\"${filterState}\"`;\n    fetch(\n      'https://emerald-mission-191715.firebaseio.com/ingredients.json' + query\n    )\n      .then((response) => response.json())\n      .then((responseData) => {\n        const loadedIngredients = [];\n        for (const key in responseData) {\n          loadedIngredients.push({\n            id: key,\n            title: responseData[key].title,\n            amount: responseData[key].amount,\n          });\n        }\n        onLoadIngredients(loadedIngredients);\n      });\n      }\n    }, 500);\n    return () => {\n      clearTimeout(timer);\n    }\n  }, [filterState, onLoadIngredients, searchRef]);\n  return (\n    <section className='search'>\n      <Card>\n        <div className='search-input'>\n          <label>Filter by Title</label>\n          <input\n            ref={searchRef}\n            type='text'\n            value={filterState}\n            onChange={(event) => setFilterState(event.target.value)}\n          />\n        </div>\n      </Card>\n    </section>\n  );\n});\n\nexport default Search;\n","import React from 'react';\n\nimport './IngredientList.css';\n\nconst IngredientList = props => {\n  return (\n    <section className=\"ingredient-list\">\n      <h2>Loaded Ingredients</h2>\n      <ul>\n        {props.ingredients.map(ig => (\n          <li key={ig.id} onClick={props.onRemoveItem.bind(this, ig.id)}>\n            <span>{ig.title}</span>\n            <span>{ig.amount}x</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nexport default IngredientList;\n","import React from 'react';\n\nimport './ErrorModal.css';\n\nconst ErrorModal = React.memo(props => {\n  return (\n    <React.Fragment>\n      <div className=\"backdrop\" onClick={props.onClose} />\n      <div className=\"error-modal\">\n        <h2>An Error Occurred!</h2>\n        <p>{props.children}</p>\n        <div className=\"error-modal__actions\">\n          <button type=\"button\" onClick={props.onClose}>\n            Okay\n          </button>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n});\n\nexport default ErrorModal;\n","import React, { useState, useEffect, useCallback, useReducer } from 'react';\n\nimport IngredientForm from './IngredientForm';\nimport Search from './Search';\nimport IngredientList from './IngredientList';\nimport ErrorModal from '../UI/ErrorModal';\n\nconst ingredientReducer = (currentIngredients, action) => {\n  switch (action.type) {\n    case 'SET':\n      return action.ingredients\n    case 'ADD':\n      return [...currentIngredients, action.ingredient]\n    case 'DELETE':\n      return currentIngredients.filter(ing => ing.id !== action.id)\n        \n    default:\n      throw new Error('Unreachable');\n  }\n}\n\nconst httpReducer = (currHttpState, action) => {\n  switch (action.type) {\n    case 'SEND':\n      return { loading: true, error: null };\n    case 'RESPONSE':\n      return {...currHttpState, loading: false};\n    case 'ERROR':\n      return { loading: false, error: action.errorData };\n    case 'CLEAR':\n      return {...currHttpState, error: null};\n    default:\n      throw new Error('Shouldnt be reached');\n  }\n}\n\nfunction Ingredients() {\n  const [ingredientsState, dispatch] = useReducer(ingredientReducer, [])\n  const [httpState, dispatchHttp] = useReducer(httpReducer, { loading: false, error: null });\n  // const [ingredientsState, setIngredientsState] = useState([]);\n  // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError] = useState();\n\n  // Using callback will cache the function and revent recreation in a re render cycle\n  const filterIngredientHandler = useCallback((filteredIngredients) => {\n    // setIngredientsState(filteredIngredients);\n    dispatch({\n      type: 'SET',\n      ingredients: filteredIngredients\n    });\n  }, []);\n\n  // Will cause Infinite rerendering \n  // const filterIngredientHandler = (filteredIngredients) => {\n  //   setIngredientsState(filteredIngredients);\n  // };\n\n  const addIngredientHandler = (newIngredients) => {\n    dispatchHttp({type: 'SEND'});\n    // setIsLoading(true);\n    fetch('https://emerald-mission-191715.firebaseio.com/ingredients.json', {\n      method: 'POST',\n      body: JSON.stringify(newIngredients),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(\n        // Will generate and return a promise, will also add ID\n        // This is just an HTTP response, not the actual JSON. To extract the JSON body content from the response, we use the json()\n        (response) => {\n          dispatchHttp({type: 'RESPONSE'});\n          // setIsLoading(false)\n          return response.json();\n        }\n      )\n      .then((responseData) => {\n        // setIngredientsState((previouseIngredients) => [\n        //   // Taking all previous ingreidents\n        //   ...previouseIngredients,\n        //   // Attaching id to new ingredient and adding it to the state\n        //   { id: responseData.name, ...newIngredients },\n        // ]);\n        dispatch({\n          type: 'ADD',\n          ingredient: { id: responseData.name, ...newIngredients }\n        })\n      }).catch(error => dispatchHttp({type: 'ERROR', error: error.message}));\n  };\n\n  const removeIngredientHandler = ingredientId => {\n    // setIsLoading(true);\n    dispatchHttp({type: 'SEND'});\n    fetch(`https://emerald-mission-191715.firebaseio.com/ingredients/${ingredientId}.json`, {\n      method: 'DELETE'\n    }).then(response => {\n      // setIsLoading(false)\n    dispatchHttp({type: 'RESPONSE'});\n      console.log('Executed');\n      console.log(ingredientsState);\n      // setIngredientsState(prevIngredients =>\n      //   prevIngredients.filter(ingredient => ingredient.id !== ingredientId)\n      // );\n      dispatch({\n        type: 'DELETE',\n        id: ingredientId\n      })\n      console.log(ingredientsState);\n    }).catch(error => dispatchHttp({type:'ERROR', error: error.message}));\n  }\n\n  const clearErrorHandler = () => {\n    // setError();\n    // setIsLoading(false);\n    dispatchHttp({type: 'CLEAR'})\n  }\n\n  return (\n    <div className='App'>\n      { httpState.error ? <ErrorModal onClose={clearErrorHandler}> {httpState.error} </ErrorModal> : null }\n      <IngredientForm onAddIngredient={addIngredientHandler} loading={httpState.isLoading} />\n\n      <section>\n        <Search onLoadIngredients={filterIngredientHandler} />\n        {/* Need to add list here! */}\n        <IngredientList\n          ingredients={ingredientsState}\n          onRemoveItem={removeIngredientHandler}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default Ingredients;\n","import React, { useState } from 'react'\n\nexport const AuthContext = React.createContext({\n  isAuth: false,\n  login: () => {}\n})\n\nconst AuthContextProvider = (props) => {\n\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n  const loginHandler = () => {\n    setIsAuthenticated(true);\n  }\n  return (\n    <AuthContext.Provider value={{login: loginHandler, isAuth: isAuthenticated}}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\nexport default AuthContextProvider;","import React, { useCallback, useContext } from 'react';\n\nimport Card from './UI/Card';\nimport './Auth.css';\nimport { AuthContext } from '../context/auth-context';\n\nconst Auth = props => {\n  const authContext = useContext(AuthContext);\n\n  const loginHandler = () => {\n    authContext.login();\n  };\n\n  return (\n    <div className=\"auth\">\n      <Card>\n        <h2>You are not authenticated!</h2>\n        <p>Please log in to continue.</p>\n        <button onClick={loginHandler}>Log In</button>\n      </Card>\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useContext } from 'react';\n\nimport Ingredients from './components/Ingredients/Ingredients';\nimport Auth from './components/Auth';\nimport AuthContextProvider, { AuthContext } from './context/auth-context';\n\nconst App = props => {\n  const authContext = useContext(AuthContext);\n  let content = <Auth />\n  if(authContext.isAuth) {\n    content = <Ingredients />\n  }\n  return content;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AuthContextProvider from './context/auth-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthContextProvider>\n      <App />\n    </AuthContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}